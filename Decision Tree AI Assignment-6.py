# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/194EPoZ6DlXMpPiXmYGclB6cIQMR4WEEe
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
import time

# Load your CSV file into a Pandas DataFrame
# Replace 'your_data.csv' with the actual name of your CSV file
df = pd.read_csv('/content/Fraud_check.csv')

# Define the target variable based on taxable income
df['Target'] = df['Taxable.Income'].apply(lambda x: 0 if x <= 30000 else 1)

# Drop unnecessary columns
df = df.drop(['Taxable.Income'], axis=1)

# Assuming 'Target' is the name of the target variable
X = df.drop('Target', axis=1)  # Features
y = df['Target']  # Target variable

# Convert categorical variables to numerical using one-hot encoding
X = pd.get_dummies(X, columns=['Undergrad', 'Marital.Status', 'Urban'], drop_first=True)

# Split the data into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a decision tree classifier
start_time = time.time()
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)
end_time = time.time()

# Calculate the training time
training_time = end_time - start_time
print(f"Training time: {training_time:.2f} seconds")

# Make predictions on the test data
start_time = time.time()
y_pred = clf.predict(X_test)
end_time = time.time()

# Calculate the prediction time
prediction_time = end_time - start_time
print(f"Prediction time: {prediction_time:.2f} seconds")

# Evaluate the accuracy of the classifier on the test set
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy on the test set: {accuracy:.2f}")

# Display the classification report
report = classification_report(y_test, y_pred)
print("Classification Report:\n", report)